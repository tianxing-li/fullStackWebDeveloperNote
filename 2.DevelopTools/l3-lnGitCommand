git init	//create brand new repos, he empty one that we created with the git init command
git clone	//copy existing repos from somewhere, the one we cloned with the git clone command
git status	//check the status of a repo

git clone https://abc.def/hjk new_folder

git status	//change depending on if files have been added/deleted/modified; display the current status of the repository.
git log		//show the SHA, the author, the date and the message
			// --oneline
			// --stat 	(displays the file(s) that have been modified)
			// -p (patch, display the actual changes made to a file)
				//@@ -78,9 +78,15 @@ 78 is location, 9 is how many lines showed from the old doc, 15 is how many lines showed from the new doc.
				// -w ignores whitespace changes
git show	// plus hash that u can check the change
			//can be combined with most of the other flags

git add 	//move files from the Working Directory to the Staging Index.
git add . 	// add all changed files
git rm --cached <file>...	// to unstage

git config --global core.editor <your-editor's-config-went-here>

git commit
git commit -m "Initial commit"
			//each commit should make a change to just one aspect of the project.
			//Explain the Why: If you need to explain why a commit needs to be made, you can!
				When you're writing the commit message, the first line is the message itself. After the message, leave a blank line, and then type out the body or explanation including details about why the commit is needed 
				https://udacity.github.io/git-styleguide/

git diff	//the actual changes that have been made from wording area to staging area

Git Ignore: ATTENTION: THAT IS A DOC
						//just need to write the file name which should be ignored
	used to tell Git about the files that Git should not track. This file should be placed in the same directory that the .git directory is in.

	If you want to keep a file in your project's directory structure but make sure it isn't accidentally committed to the project, you can use the specially named file, .gitignore (note the dot at the front, it's important!). Add this file to your project in the same directory that the hidden .git directory is located. All you have to do is list the names of files that you want Git to ignore (not track) and it will ignore them.

	blank lines can be used for spacing
	# - marks line as a comment
	* - matches 0 or more characters
	? - matches 1 character
	[abc] - matches a, b, _or_ c
	** - matches nested directories - a/**/z matches
		a/z
		a/b/z
		a/b/c/z

git tag 			// check tags
git tag -a v1.0		// add a tag
git tag -a v1.0 a87984
git tag -a beta b552fa5
git tag -d v1.0		// del a tag
git tag --delete v1.0
		//-a tells Git to create an annotated flag. If you don't provide the flag (i.e. git tag v1.0) then it'll create what's called a lightweight tag.
		//Annotated tags are recommended because they include a lot of extra information such as:
			the person who made the tag
			the date the tag was made
			a message for the tag

git branch 					//list all branch names in the repository
git branch "branchname"		//
git branch -d "branchname"	//delete "branchname". can't delete a branch that currently on
							//Git won't let you delete a branch if it has commits on it that aren't on any other branch (meaning the commits are unique to the branch that's about to be deleted).
							git branch -D "branchname" force deletion
git branch "branchname" a87984
git checkout a87984			//switch between branches or commits
			// master
			// branchname
			-b 	//create a new branch
git log --oneline --decorate

git log --oneline --decorate --graph --all

git reset --hard HEAD^	//undo the merge
git merge "branchname"	//merging some other branch into the current (checked-out) branch
		//1. Fast-forward merge – the branch being merged in must be ahead of the checked out branch
		//2. the regular type of merge. two divergent branches are combined. a merge commit is created

		Merge Conflict Indicators Explanation
			<<<<<<< HEAD everything below this line (until the next indicator) shows you what's on the current branch
			||||||| merged common ancestors everything below this line (until the next indicator) shows you what the original lines were
			======= is the end of the original lines, everything that follows (until the next indicator) is what's on the branch that's being merged in
			>>>>>>> heading-update is the ending indicator of what's on the branch that's being merged in (in this case, the heading-update branch)

			//removed all lines with merge conflict indicators and have selected what heading you want to use, just save the file, add it to the staging index, and commit it!

git commit --amend	//include files (or changes to files), alter the most-recent commit
						1. edit the file(s)
						2. save the file(s)
						3. stage the file(s)
						4. and run git commit --amend	//update the most-recent commit instead of creating a new one

git revert <SHA-of-commit-to-revert>	//undo the changes that were made by the provided commit

git reset	// ^ – indicates the parent commit
			// ~ – indicates the first parent commit
			//HEAD^ <==> HEAD~ <==> HEAD~1 <==> the parent commit – the following indicate the parent commit of the current commit
			//HEAD^^ <==> HEAD~2, HEAD^^^ <==> HEAD~3, HEAD^^^ is the 1st parent from HEAD^^, HEAD^^^2 is the 2nd parent from HEAD^^
			//HEAD^^^2 <==> HEAD~2^2
			//difference: the ^ reference is used to indicate the first parent (inside) of the commit while ^2 indicates the second parent
			// --mixed (default) move to working directory
			// --soft mv to Staging Index
			// --hard mv to trash

git branch backup	//follow along with all the resetting stuff that's coming up

git reflog	//Git does keep track of everything for about 30 days before it completely erases anything

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
REMOTES
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

git remote 	//manage and interact with remote repositories
			//-v full path to the remote repository

//add a new repo on github then
git remote add origin https://github.com/xxxx/xxxx.git

git push origin master	//git push <remote-shortname> <branch>
git pull origin master	//automatically merge
git fetch				//no automatically merge

git shortlog	//displays an alphabetical list of names and the commit messages that go along with them
			// -s show just the number of commits
			// -n sort them numerically
			// --author==xxx display all of the commits by an author
			// --author=="abc def"

git log --grep=bug
git log --grep bug
git log --grep="unit tests"
git log --grep "fort" 	//Git will display only the commits that have the character f followed by the character o followed by r followed by t.